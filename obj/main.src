; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\MAIN.C"
	.assume ADL=1
	SEGMENT DATA
_xPos:
	DW	100
	DB	0
_yPos:
	DW	100
	DB	0
_squareSize:
	DW	10
	DB	0
_speed:
	DW	6
	DB	0
	SEGMENT BSS
_key:
	DS	1
	SEGMENT DATA
_fruitX:
	DW	0
	DB	0
_fruitY:
	DW	0
	DB	0
_segments:
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
	DW	0
	DB	0
_noSegments:
	DW	1
	DB	0
_maxSegments:
	DW	300
	DB	0
	SEGMENT BSS
_scoreBuf:
	DS	20
_resBuf:
	DS	20
	SEGMENT DATA
_i:
	DW	0
	DB	0
_frames:
	DL	0
_currentGameStatus:
	DW	0
	DB	0
	SEGMENT BSS
_currentDir:
	DS	3
	SEGMENT DATA
_kb_Data1_last:
	DW	0
	DB	0
_kb_2nd_pressed:
	DW	0
	DB	0
;    1	/*
;    2	 *--------------------------------------
;    3	 * Program Name: Snake for CE
;    4	 * Author: Malcolm Anderson
;    5	 * License: uuhhhhh idk
;    6	 * Description: It's Snake. For the CE.
;    7	 *--------------------------------------
;    8	*/
;    9	
;   10	/* Keep these headers */
;   11	#include <stdbool.h>
;   12	#include <stddef.h>
;   13	#include <stdint.h>
;   14	#include <tice.h>
;   15	
;   16	/* Standard headers (recommended) */
;   17	#include <math.h>
;   18	#include <stdio.h>
;   19	#include <stdlib.h>
;   20	#include <string.h>
;   21	
;   22	#include <graphx.h>
;   23	#include <debug.h>
;   24	#include <keypadc.h>
;   25	
;   26	#define SCREEN_MAX_X 320
;   27	#define SCREEN_MAX_Y 240
;   28	
;   29	/* Put your function prototypes here */
;   30	void generateFruit(void);
;   31	void shiftSegments(void);
;   32	/* Put all your globals here */
;   33	
;   34	int xPos = 100;
;   35	int yPos = 100;
;   36	int squareSize = 10;
;   37	int speed = 6;
;   38	kb_key_t key;
;   39	
;   40	int fruitX = 0;
;   41	int fruitY = 0;
;   42	
;   43	int segments[2][300] = 0;
;   44	unsigned int noSegments = 1;
;   45	unsigned int maxSegments = 300;
;   46	char scoreBuf[20];
;   47	char resBuf[20];
;   48	
;   49	int i = 0; // for iterations
;   50	
;   51	
;   52	unsigned long int frames = 0;
;   53	
;   54	enum Direction {
;   55	    Up = 0,
;   56	    Right = 1,
;   57	    Down = 2,
;   58	    Left = 3
;   59	};
;   60	
;   61	enum GameStatus {
;   62	    Playing = 0,
;   63	    Paused = 1,
;   64	    Lost = 2
;   65	};
;   66	
;   67	enum GameStatus currentGameStatus = Playing;
;   68	
;   69	enum Direction currentDir;
;   70	
;   71	int kb_Data1_last = 0;
;   72	int kb_2nd_pressed = 0;
	SEGMENT CODE
;   73	
;   74	void main(void) {
_main:
	LD	HL,-40
	CALL	__frameset
;   75	    currentDir = Right;
	LD	BC,1
	LD	(_currentDir),BC
;   76	
;   77	    
;   78	    /* Fill in the body of the main function here */
;   79	
;   80	    gfx_Begin();
	CALL	_gfx_Begin
;   81	    gfx_SetDrawBuffer();
	LD	BC,1
	PUSH	BC
	CALL	_gfx_SetDraw
	POP	BC
;   82	    gfx_SetColor(gfx_white);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;   83	    gfx_SetTextFGColor(gfx_white);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;   84	
;   85	    generateFruit();
	CALL	_generateFruit
;   86	
;   87	
;   88	
;   89	
;   90	    
;   91	    kb_Scan();
	CALL	_kb_Scan
;   92	
;   93	    do {
L_64:
;   94	        frames++;
	LD	A,(_frames+3)
	LD	E,A
	LD	A,1
	LD	HL,(_frames)
;   95	        gfx_FillScreen(gfx_black);
	LD	BC,0
	PUSH	BC
	CALL	__ladd_b
	LD	(_frames),HL
	LD	A,E
	LD	(_frames+3),A
	CALL	_gfx_FillScreen
	POP	BC
;   96	
;   97	        // if (kb_Data[1] == kb_Del) {
;   98	        //     boot_TurnOff();
;   99	        // }
;  100	
;  101	        //int kb_2nd_pressed = (kb_Data[1] == kb_2nd && kb_data1_last != kb_2nd);
;  102	
;  103	        if (kb_Data[1] == kb_2nd && currentGameStatus == Playing) {
	LD	A,(16056338)
	CP	A,32
	JR	Z,L__1
	LD	A,1
	JR	L__2
L__1:
	XOR	A,A
L__2:
	LD	(IX+-10),A
	OR	A,A
	JR	NZ,L_9
	LD	HL,(_currentGameStatus)
	CALL	__icmpzero
	JR	NZ,L_9
;  104	            currentGameStatus = Paused;
	LD	BC,1
	LD	(_currentGameStatus),BC
;  105	            for (i = 0; i < 100; i++) {
	LD	BC,0
	LD	(_i),BC
	JR	L_5
L_3:
;  106	                boot_WaitShort();
	CALL	_boot_WaitShort
;  107	                boot_WaitShort();
	CALL	_boot_WaitShort
;  108	                boot_WaitShort();
	CALL	_boot_WaitShort
	LD	BC,(_i)
	INC	BC
	LD	(_i),BC
;  109	            }
L_5:
	LD	BC,100
	LD	HL,(_i)
	OR	A,A
	SBC	HL,BC
	JP	M,L_3
	JR	L_11
;  110	            
;  111	        } else if (kb_Data[1] == kb_2nd && currentGameStatus == Paused) {
L_9:
	LD	A,(IX+-10)
	OR	A,A
	JR	NZ,L_11
	LD	BC,1
	LD	HL,(_currentGameStatus)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_11
;  112	            currentGameStatus = Playing;
	LD	BC,0
	LD	(_currentGameStatus),BC
;  113	        }
L_11:
;  114	
;  115	        if (currentGameStatus == Paused) {
	LD	BC,1
	LD	HL,(_currentGameStatus)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_12
;  116	            gfx_SetTextFGColor(127);
	LD	BC,127
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  117	
;  118	            sprintf(scoreBuf, "PAUSED - %d", noSegments);
	LD	BC,(_noSegments)
	PUSH	BC
	LD	BC,L__9
	PUSH	BC
	LD	BC,_scoreBuf
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  119	            gfx_PrintStringXY(scoreBuf, 0, 0);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,_scoreBuf
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  120	
;  121	            gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  122	            kb_Data1_last = kb_Data[1];
	LD	A,(16056338)
	UEXT	HL
	LD	L,A
	LD	(_kb_Data1_last),HL
;  123	            boot_WaitShort();
	CALL	_boot_WaitShort
;  124	            boot_WaitShort();
	CALL	_boot_WaitShort
;  125	            boot_WaitShort();
	CALL	_boot_WaitShort
;  126	            continue;
	JR	L_65
;  127	        }
L_12:
;  128	
;  129	        gfx_SetColor(gfx_white);
	LD	BC,255
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  130	
;  131	        // for (i = noSegments - 1; i >= 0; i--) {
;  132	        //     gfx_SetColor(i);
;  133	        //     gfx_FillRectangle(segments[0][i], segments[1][i], squareSize, squareSize);
;  134	        // }
;  135	
;  136	        for (i = 0; i < noSegments; i++) {
	LD	BC,0
	LD	(_i),BC
	JR	L_16
L_14:
;  137	            //gfx_SetColor(i * 5);
;  138	            // gfx_SetColor(gfx_white);
;  139	            gfx_FillRectangle(segments[0][i], segments[1][i], squareSize, squareSize);   
	LD	HL,(_i)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,_segments
	LD	DE,900
	ADD	HL,DE
	LD	DE,BC
	ADD	HL,DE
	LD	DE,(HL)
	LD	HL,(_squareSize)
	PUSH	HL
	LD	HL,BC
	LD	BC,(_squareSize)
	PUSH	BC
	PUSH	DE
	LD	BC,_segments
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_gfx_FillRectangle
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	BC,(_i)
	INC	BC
	LD	(_i),BC
;  140	        }
L_16:
	LD	BC,(_noSegments)
	LD	HL,(_i)
	OR	A,A
	SBC	HL,BC
	JR	C,L_14
;  141	
;  142	        gfx_SetColor(gfx_yellow);
	LD	BC,231
	PUSH	BC
	CALL	_gfx_SetColor
	POP	BC
;  143	        gfx_FillCircle(fruitX, fruitY, squareSize / 2);
	LD	HL,(_squareSize)
	LD	BC,2
	CALL	__idivs
	PUSH	HL
	LD	BC,(_fruitY)
	PUSH	BC
	LD	BC,(_fruitX)
	PUSH	BC
	CALL	_gfx_FillCircle
	POP	BC
	POP	BC
	POP	BC
;  144	
;  145	        /* Update kb_Data */
;  146	        kb_Scan();
	CALL	_kb_Scan
;  147	
;  148	        /* Load group 7 registers */
;  149	        key = kb_Data[7];
	LD	A,(16056350)
;  150	
;  151	        switch (key) {
	UEXT	HL
	LD	L,A
	LD	(_key),A
	CALL	__case8
L__11:
	DW	4
	DB	1
	DW24	L_18	

	DB	2
	DW24	L_27	

	DB	4
	DW24	L_21	

	DB	8
	DW24	L_24	

	DW24	L_36	

;  152	            case kb_Down:
L_18:
;  153	                if (currentDir != Up) currentDir = Down;
	LD	HL,(_currentDir)
	CALL	__icmpzero
	JR	Z,L_36
	LD	BC,2
	LD	(_currentDir),BC
;  154	                break;
	JR	L_36
;  155	            case kb_Right:
L_21:
;  156	                if (currentDir != Left) currentDir = Right;
	LD	BC,3
	LD	HL,(_currentDir)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_36
	LD	BC,1
	LD	(_currentDir),BC
;  157	                break;
	JR	L_36
;  158	            case kb_Up:
L_24:
;  159	                if (currentDir != Down) currentDir = Up;
	LD	BC,2
	LD	HL,(_currentDir)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_36
	LD	BC,0
	LD	(_currentDir),BC
;  160	                break;
	JR	L_36
;  161	            case kb_Left:
L_27:
;  162	                if (currentDir != Right) currentDir = Left;
	LD	BC,1
	LD	HL,(_currentDir)
	OR	A,A
	SBC	HL,BC
	JR	Z,L_36
	LD	BC,3
	LD	(_currentDir),BC
;  163	                break;
;  164	            default:
;  165	                break;
;  166	        }
L_36:
;  167	
;  168	        switch ((int)currentDir)
	LD	HL,(_currentDir)
	CALL	__seqcase
L__16:
	DW	4
	DW	0
	DB	0
	DW24	L_31	

	DW24	L_32	

	DW24	L_33	

	DW24	L_34	

	DW24	L_40	

;  169	        {
;  170	        case 0: // up
L_31:
;  171	            yPos-= speed;
	LD	HL,(_yPos)
	LD	BC,(_speed)
	OR	A,A
	SBC	HL,BC
	LD	(_yPos),HL
;  172	            break;
	JR	L_40
;  173	        case 1: // Right
L_32:
;  174	            xPos+= speed;
	LD	BC,(_speed)
	LD	HL,(_xPos)
	ADD	HL,BC
	LD	(_xPos),HL
;  175	            break;
	JR	L_40
;  176	        case 2: // Down
L_33:
;  177	            yPos+= speed;
	LD	BC,(_speed)
	LD	HL,(_yPos)
	ADD	HL,BC
	LD	(_yPos),HL
;  178	            break;
	JR	L_40
;  179	        case 3: // Left
L_34:
;  180	            xPos-= speed;
	LD	HL,(_xPos)
	LD	BC,(_speed)
	OR	A,A
	SBC	HL,BC
	LD	(_xPos),HL
;  181	            break;
;  182	        default:
;  183	            break;
;  184	        }
L_40:
;  185	
;  186	        if (yPos > SCREEN_MAX_Y) {
	LD	BC,(_yPos)
	LD	HL,240
	OR	A,A
	SBC	HL,BC
	JP	P,L_39
;  187	            yPos = 0;
	LD	BC,0
	LD	(_yPos),BC
;  188	        } else if (yPos < 0) {
	JR	L_44
L_39:
	LD	HL,(_yPos)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_44
;  189	            yPos = SCREEN_MAX_Y;
	LD	BC,240
	LD	(_yPos),BC
;  190	        }
L_44:
;  191	
;  192	        if (xPos > SCREEN_MAX_X) {
	LD	BC,(_xPos)
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_43
;  193	            xPos = 0;
	LD	BC,0
	LD	(_xPos),BC
;  194	        } else if (xPos < 0) {
	JR	L_45
L_43:
	LD	HL,(_xPos)
	CALL	__icmpzero
	CALL	__setflag
	JP	P,L_45
;  195	            xPos = SCREEN_MAX_X;
	LD	BC,320
	LD	(_xPos),BC
;  196	        }
L_45:
;  197	
;  198	        shiftSegments();
	CALL	_shiftSegments
;  199	        segments[0][0] = xPos;
	LD	BC,(_xPos)
	LD	(_segments),BC
;  200	        segments[1][0] = yPos;
	LD	BC,900
	LD	HL,_segments
	ADD	HL,BC
	LD	BC,(_yPos)
	LD	(HL),BC
;  201	
;  202	        for (i = 1; i < noSegments; i++) {
	LD	BC,1
	LD	(_i),BC
	JR	L_51
L_49:
;  203	            if (segments[0][0] == segments[0][i] && segments[1][0] == segments[1][i]) {
	LD	BC,_segments
	LD	(IX+-16),BC
	LD	HL,(_i)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	(IX+-13),HL
	LD	BC,(IX+-16)
	ADD	HL,BC
	LD	IY,(IX+-16)
	LD	BC,(IY)
	LD	HL,(HL)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_50
	LD	BC,900
	LD	HL,_segments
	ADD	HL,BC
	LD	(IX+-19),HL
	LD	BC,(IX+-13)
	LD	HL,(IX+-19)
	ADD	HL,BC
	LD	IY,(IX+-19)
	LD	BC,(IY)
	LD	HL,(HL)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_50
;  204	                currentGameStatus = Lost;
	LD	BC,2
	LD	(_currentGameStatus),BC
;  205	                break;
	JR	L_62
;  206	            }
;  207	        }
L_50:
	LD	BC,(_i)
	INC	BC
	LD	(_i),BC
L_51:
	LD	BC,(_noSegments)
	LD	HL,(_i)
	OR	A,A
	SBC	HL,BC
	JR	C,L_49
L_62:
;  208	
;  209	        if (abs(segments[0][0] - fruitX) < 10 && abs(segments[1][0] - fruitY) < 10) {
	LD	BC,_segments
	LD	(IX+-9),BC
	LD	HL,(_segments)
	LD	BC,(_fruitX)
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	CALL	_abs
	POP	BC
	LD	BC,10
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_63
	LD	BC,900
	LD	HL,_segments
	ADD	HL,BC
	LD	(IX+-6),HL
	LD	HL,(HL)
	LD	BC,(_fruitY)
	OR	A,A
	SBC	HL,BC
	PUSH	HL
	CALL	_abs
	POP	BC
	LD	BC,10
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_63
;  210	            // speed++;
;  211	            noSegments += 3;
	LD	IY,(_noSegments)
	LEA	BC,IY+3
	LD	(_noSegments),BC
;  212	            if (noSegments >= maxSegments) {
	LD	BC,(_maxSegments)
	LD	HL,(_noSegments)
	OR	A,A
	SBC	HL,BC
	JR	NC,L_63
;  213	
;  214	            } else {
;  215	                shiftSegments();
	CALL	_shiftSegments
;  216	                segments[0][noSegments - 1] = segments[0][noSegments - 2];
	LD	IY,(_noSegments)
	LEA	BC,IY+-2
	LD	HL,3
	CALL	__imulu
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	(IX+-22),HL
	LD	IY,(_noSegments)
	LEA	BC,IY+-1
	LD	(IX+-3),BC
	LD	HL,(IX+-22)
	LD	DE,(HL)
	LD	HL,3
	CALL	__imulu
	LD	BC,HL
	LD	(IX+-37),BC	; spill
	LD	(IX+-40),BC	; spill
	LD	BC,(IX+-37)	; unspill
	LD	HL,(IX+-9)
	LD	(IX+-37),BC	; spill
	LD	BC,(IX+-40)	; unspill
	ADD	HL,BC
	LD	BC,(IX+-37)	; unspill
	LD	(HL),DE
;  217	                segments[1][noSegments - 1] = segments[0][noSegments - 2];
	LD	HL,(IX+-22)
	LD	DE,(HL)
	LD	HL,(IX+-6)
	ADD	HL,BC
	LD	(HL),DE
;  218	                switch ((int)currentDir)
	LD	HL,(_currentDir)
	CALL	__seqcase
L__27:
	DW	4
	DW	0
	DB	0
	DW24	L_53	

	DW24	L_54	

	DW24	L_55	

	DW24	L_56	

	DW24	L_58	

;  219	                {
;  220	                case 0: // up
L_53:
;  221	                    segments[1][noSegments - 1] += squareSize * 3;
	LD	HL,3
	LD	BC,(IX+-3)
	CALL	__imulu
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	(IX+-25),HL
	LD	BC,(HL)
	LD	HL,(_squareSize)
	LD	DE,HL
	LD	IY,(IX+-25)
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	(IY),HL
;  222	                    // yPos--;
;  223	                    break;
	JR	L_58
;  224	                case 1: // Right
L_54:
;  225	                    segments[0][noSegments - 1] -= squareSize * 3;
	LD	HL,3
	LD	BC,(IX+-3)
	CALL	__imulu
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	(IX+-28),HL
	LD	HL,(_squareSize)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-28)
	LD	HL,(HL)
	LD	IY,(IX+-28)
	OR	A,A
	SBC	HL,BC
	LD	(IY),HL
;  226	                    // xPos++;
;  227	                    break;
	JR	L_58
;  228	                case 2: // Down
L_55:
;  229	                    segments[1][noSegments - 1] -= squareSize * 3;
	LD	HL,3
	LD	BC,(IX+-3)
	CALL	__imulu
	LD	BC,(IX+-6)
	ADD	HL,BC
	LD	(IX+-31),HL
	LD	HL,(_squareSize)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	HL,(IX+-31)
	LD	HL,(HL)
	LD	IY,(IX+-31)
	OR	A,A
	SBC	HL,BC
	LD	(IY),HL
;  230	                    // yPos++;
;  231	                    break;
	JR	L_58
;  232	                case 3: // Left
L_56:
;  233	                    segments[0][noSegments - 1] += squareSize * 3;
	LD	HL,3
	LD	BC,(IX+-3)
	CALL	__imulu
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	(IX+-34),HL
	LD	BC,(HL)
	LD	HL,(_squareSize)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	IY,(IX+-34)
	LD	(IY),HL
;  234	                    // xPos--;
;  235	                    break;
;  236	                default:
;  237	                    break;
;  238	                }
L_58:
;  239	                generateFruit();
	CALL	_generateFruit
;  240	            }
;  241	            
;  242	        }
L_63:
;  243	
;  244	
;  245	
;  246	        gfx_SetTextFGColor(127);
	LD	BC,127
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  247	
;  248	        sprintf(scoreBuf, "%d", noSegments);
	LD	BC,(_noSegments)
	PUSH	BC
	LD	BC,L__28
	PUSH	BC
	LD	BC,_scoreBuf
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  249	        gfx_PrintStringXY(scoreBuf, 0, 0);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,_scoreBuf
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  250	
;  251	        gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  252	
;  253	        kb_Data1_last = kb_Data[1];
	LD	A,(16056338)
	UEXT	HL
	LD	L,A
	LD	(_kb_Data1_last),HL
;  254	
;  255	        boot_WaitShort();
	CALL	_boot_WaitShort
;  256	        boot_WaitShort();
	CALL	_boot_WaitShort
;  257	        boot_WaitShort();
	CALL	_boot_WaitShort
;  258	        
;  259	
;  260	    } while (currentGameStatus != Lost);
L_65:
	LD	BC,2
	LD	HL,(_currentGameStatus)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_64
;  261	
;  262	    gfx_FillScreen(gfx_black);
	LD	BC,0
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  263	    gfx_SetTextFGColor(gfx_yellow);
	LD	BC,231
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  264	
;  265	    sprintf(resBuf, "Your Score Was %d", noSegments);
	LD	BC,(_noSegments)
	PUSH	BC
	LD	BC,L__30
	PUSH	BC
	LD	BC,_resBuf
	PUSH	BC
	CALL	_sprintf
	POP	BC
	POP	BC
	POP	BC
;  266	    gfx_PrintStringXY(resBuf,(LCD_WIDTH - gfx_GetStringWidth(resBuf)) / 2, (LCD_HEIGHT - 8) / 2);
	LD	BC,116
	PUSH	BC
	LD	BC,_resBuf
	PUSH	BC
	CALL	_gfx_GetStringWidth
	POP	BC
	LD	BC,HL
	LD	HL,320
	OR	A,A
	SBC	HL,BC
	LD	A,1
	CALL	__ishru_b
	PUSH	HL
	LD	BC,_resBuf
	PUSH	BC
	CALL	_gfx_PrintStringXY
	POP	BC
	POP	BC
	POP	BC
;  267	    gfx_SwapDraw();
	CALL	_gfx_SwapDraw
;  268	    boot_WaitShort();
	CALL	_boot_WaitShort
;  269	    boot_WaitShort();
	CALL	_boot_WaitShort
;  270	    boot_WaitShort();
	CALL	_boot_WaitShort
;  271	    boot_WaitShort();
	CALL	_boot_WaitShort
;  272	    while (!os_GetCSC());
L_68:
	CALL	_os_GetCSC
	OR	A,A
	JR	Z,L_68
;  273	    
;  274	
;  275	    gfx_End();
	CALL	_gfx_End
;  276	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_gfx_End                            IMPORT  -----   function
;_os_GetCSC                          IMPORT  -----   function
;_gfx_GetStringWidth                 IMPORT  -----   function
;_resBuf                             STATIC     20   variable
;_maxSegments                        STATIC      3   variable
;_abs                                IMPORT  -----   function
;_shiftSegments                      IMPORT  -----   function
;_xPos                               STATIC      3   variable
;_speed                              STATIC      3   variable
;_yPos                               STATIC      3   variable
;_key                                STATIC      1   variable
;_fruitX                             STATIC      3   variable
;_fruitY                             STATIC      3   variable
;_gfx_FillCircle                     IMPORT  -----   function
;_segments                           STATIC   1800   variable
;_squareSize                         STATIC      3   variable
;_gfx_FillRectangle                  IMPORT  -----   function
;_kb_Data1_last                      STATIC      3   variable
;_gfx_SwapDraw                       IMPORT  -----   function
;_gfx_PrintStringXY                  IMPORT  -----   function
;_scoreBuf                           STATIC     20   variable
;_noSegments                         STATIC      3   variable
;_sprintf                            IMPORT  -----   function
;_boot_WaitShort                     IMPORT  -----   function
;_i                                  STATIC      3   variable
;_currentGameStatus                  STATIC      3   variable
;_gfx_FillScreen                     IMPORT  -----   function
;_frames                             STATIC      4   variable
;_kb_Scan                            IMPORT  -----   function
;_generateFruit                      IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetColor                       IMPORT  -----   function
;_gfx_SetDraw                        IMPORT  -----   function
;_gfx_Begin                          IMPORT  -----   function
;_currentDir                         STATIC      3   variable
;G_1                                  IX-13      3   variable
;G_0                                  IX-10      1   variable
;G_2                                   IX-9      3   variable
;G_5                                   IX-6      3   variable
;G_6                                   IX-3      3   variable


; Stack Frame Size: 46 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__9:
	DB	"PAUSED - %d"
	DB	0
L__28:
	DB	"%d"
	DB	0
L__30:
	DB	"Your Score Was %d"
	DB	0
	SEGMENT CODE
;  277	
;  278	void generateFruit(void) {
_generateFruit:
;  279	    srand(rtc_Time());
	LD	BC,(15925316)
	PUSH	BC
	CALL	_srand
	POP	BC
;  280	    fruitX = rand() % (SCREEN_MAX_X);
	CALL	_rand
	LD	BC,320
	CALL	__irems
	LD	(_fruitX),HL
;  281	    fruitY = rand() % (SCREEN_MAX_Y);
	CALL	_rand
	LD	BC,240
	CALL	__irems
	LD	(_fruitY),HL
;  282	}
	RET	


;**************************** _generateFruit ***************************
;Name                         Addr/Register   Size   Type
;_fruitY                             STATIC      3   variable
;_fruitX                             STATIC      3   variable
;_rand                               IMPORT  -----   function
;_srand                              IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


;  283	
;  284	void shiftSegments(void) {
_shiftSegments:
	LD	HL,-39
	CALL	__frameset
;  285	    for (i = noSegments; i > 0; i--) {
	LD	BC,(_noSegments)
	LD	(_i),BC
	JR	L_75
L_73:
;  286	        segments[0][i] = segments[0][i - 1];
	LD	BC,_segments
	LD	(IX+-6),BC
	LD	DE,(_i)
	DEC	DE
	LD	BC,DE
	LD	HL,3
	CALL	__imulu
	LD	BC,HL
	LD	HL,(_i)
	LD	(IX+-12),BC	; spill
	LD	(IX+-15),HL	; spill
	LD	BC,(IX+-12)	; unspill
	ADD	HL,HL
	LD	(IX+-12),BC	; spill
	LD	BC,(IX+-15)	; unspill
	ADD	HL,BC
	LD	BC,(IX+-12)	; unspill
	LD	(IX+-9),HL
	LD	HL,(IX+-6)
	LD	(IX+-18),BC	; spill
	LD	(IX+-21),BC	; spill
	LD	BC,(IX+-18)	; unspill
	LD	(IX+-18),BC	; spill
	LD	BC,(IX+-21)	; unspill
	ADD	HL,BC
	LD	BC,(IX+-18)	; unspill
	LD	IY,HL
	LD	HL,(IX+-6)
	LD	(IX+-24),BC	; spill
	LD	BC,(IX+-9)
	LD	(IX+-27),BC	; spill
	LD	BC,(IX+-24)	; unspill
	LD	(IX+-24),BC	; spill
	LD	BC,(IX+-27)	; unspill
	ADD	HL,BC
	LD	BC,(IX+-24)	; unspill
	LD	(IX+-30),BC	; spill
	LD	BC,(IY)
	LD	(IX+-33),BC	; spill
	LD	BC,(IX+-30)	; unspill
	LD	(IX+-30),BC	; spill
	LD	BC,(IX+-33)	; unspill
	LD	(HL),BC
	LD	BC,(IX+-30)	; unspill
;  287	        segments[1][i] = segments[1][i - 1];
	LD	HL,_segments
	LD	(IX+-36),BC	; spill
	LD	BC,900
	LD	(IX+-39),BC	; spill
	LD	BC,(IX+-36)	; unspill
	LD	(IX+-36),BC	; spill
	LD	BC,(IX+-39)	; unspill
	ADD	HL,BC
	LD	BC,(IX+-36)	; unspill
	LD	(IX+-3),HL
	ADD	HL,BC
	LD	IY,HL
	LD	HL,(IX+-3)
	LD	BC,(IX+-9)
	ADD	HL,BC
	LD	BC,(IY)
	LD	(HL),BC
	LD	(_i),DE
;  288	    }
L_75:
	LD	BC,(_i)
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JP	M,L_73
;  289	    // segments[0][0] = xPos;
;  290	    // segments[1][0] = yPos;
;  291	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _shiftSegments ***************************
;Name                         Addr/Register   Size   Type
;_segments                           STATIC   1800   variable
;_i                                  STATIC      3   variable
;_noSegments                         STATIC      3   variable


; Stack Frame Size: 45 (bytes)
;       Spill Code: 0 (instruction)


	XREF _kb_Scan:ROM
	XREF _gfx_GetStringWidth:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_PrintStringXY:ROM
	XREF _gfx_SwapDraw:ROM
	XREF _gfx_SetDraw:ROM
	XREF _gfx_FillCircle:ROM
	XREF _gfx_FillRectangle:ROM
	XREF _gfx_FillScreen:ROM
	XREF _gfx_SetColor:ROM
	XREF _gfx_End:ROM
	XREF _gfx_Begin:ROM
	XREF _sprintf:ROM
	XREF _abs:ROM
	XREF _rand:ROM
	XREF _srand:ROM
	XREF _os_GetCSC:ROM
	XREF _boot_WaitShort:ROM
	XREF __idivs:ROM
	XREF __imulu:ROM
	XREF __irems:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XREF __case8:ROM
	XREF __seqcase:ROM
	XREF __ladd_b:ROM
	XREF __ishru_b:ROM
	XDEF _shiftSegments
	XDEF _generateFruit
	XDEF _main
	XDEF _kb_2nd_pressed
	XDEF _kb_Data1_last
	XDEF _currentDir
	XDEF _currentGameStatus
	XDEF _frames
	XDEF _i
	XDEF _resBuf
	XDEF _scoreBuf
	XDEF _maxSegments
	XDEF _noSegments
	XDEF _segments
	XDEF _fruitY
	XDEF _fruitX
	XDEF _key
	XDEF _speed
	XDEF _squareSize
	XDEF _yPos
	XDEF _xPos
	END
